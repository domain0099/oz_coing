# 07. 프레임워크

**풀스택 프레임워크 vs 마이크로 프레임워크**

### **풀스택 프레임워크**

- 풀스택 프레임워크는 전체적인 애플리케이션의 개발에 필요한 모든 것을 포괄적으로 제공하는 프레임워크입니다.
- 주로 백엔드 및 프론트엔드 개발에 필요한 도구, 라이브러리, 패턴 등을 포함합니다.
- **특징:**
    - **기능의 포괄성:** 데이터베이스 처리, 서버 구축, 사용자 인터페이스 등 모든 기능을 하나의 프레임워크에서 다룹니다.
    - **내부 일관성:** 일관된 코드 구조 및 설계 원칙을 따르므로 프로젝트의 일관성을 유지하기 쉽습니다.

**대표적인 풀스택 프레임워크:**

- Java Spring, Python Django, Ruby on Rails 등

**1. Java Spring**

- **특징 및 대표적인 모듈:**
    - 스프링은 자바 기반의 오픈 소스 프레임워크로, 엔터프라이즈급 애플리케이션 개발을 위한 다양한 모듈을 제공합니다.
    - 대표적인 모듈로는 Spring MVC(웹 애플리케이션 개발), Spring Boot(마이크로서비스 개발), Spring Data(데이터 액세스), Spring Security(보안) 등이 있습니다.
- **장점:**
    - 강력한 의존성 주입(DI)과 제어 역전(IoC) 기능으로 모듈 간의 결합도를 낮추어 유지보수성을 높입니다.
    - 방대한 커뮤니티와 생태계로 빠른 문제 해결과 다양한 기능 확장이 가능합니다.
- **단점:**
    - 초기 학습 곡선이 높을 수 있습니다.

**2. Python Django**

- **특징 및 대표적인 모듈:**
    - Django는 Python 기반의 웹 프레임워크로, 고수준의 웹 개발을 위한 기능을 포괄적으로 제공합니다.
    - 대표적인 모듈로는 ORM(객체 관계 매핑), MTV(Model-Template-View) 아키텍처, Django REST framework(RESTful API 개발) 등이 있습니다.
- **장점:**
    - 기본적인 기능들이 이미 내장되어 있어 빠르게 개발을 시작할 수 있습니다.
    - 강력한 ORM 기능으로 데이터베이스 작업이 편리합니다.
- **단점:**
    - 설정이 자동으로 이루어지기 때문에 초보자에게는 이해하기 어려울 수 있습니다.

**3. Ruby on Rails**

- **특징 및 대표적인 모듈:**
    - Rails는 Ruby 언어를 기반으로 하는 웹 애플리케이션 프레임워크로, 간결한 코드와 개발자 편의성을 강조합니다.
    - 대표적인 모듈로는 MVC 아키텍처, ActiveRecord(ORM), Action Pack(웹 요청 처리) 등이 있습니다.
- **장점:**
    - 간결하고 직관적인 코드 작성이 가능하며, 개발 생산성이 높습니다.
    - 동적 언어인 Ruby의 특징을 살려 유연한 프로그래밍이 가능합니다.
- **단점:**
    - 대규모 애플리케이션에는 부적합할 수 있습니다.

### **마이크로 프레임워크**

- **개념:**
    - 마이크로 프레임워크는 작고 경량화된 프레임워크로, 필요한 부분만을 담당하고 있습니다.
    - 주로 특정 기능에 중점을 두고, 개발자가 필요한 도구 및 라이브러리를 선택적으로 추가하여 사용합니다.
- **특징:**
    - **경량성:** 필요한 부분만을 다루기 때문에 더 가벼우며, 프로젝트에 필요한 기능을 선택적으로 확장할 수 있습니다.
    - **유연성:** 다양한 도구 및 라이브러리를 조합하여 사용할 수 있어 개발자가 자유롭게 확장할 수 있습니다.
    - **학습 곡선의 낮음:** 더 적은 규모의 코드와 단순한 구조로 인해 학습이 빠르게 이루어집니다.
- 특정 기능에 초점을 맞추고 필요한 부분만을 다룹니다.
- 작은 규모와 유연성을 유지하기 위해 상대적으로 자유로운 코드 구조를 가집니다.
- 선택적으로 필요한 부분을 확장하여 사용하기 때문에 더 유연하게 확장할 수 있습니다.

**1. Flask (Python)**

- **특징:**
    - 가볍고 간단한 웹 애플리케이션을 빠르게 개발할 수 있는 마이크로 프레임워크입니다.
    - 확장성이 좋고, 필요한 기능들을 선택적으로 추가할 수 있습니다.
- **장점:**
    - 간결한 코드 작성이 가능하며, 빠른 학습 곡선
    - 확장성이 뛰어나 필요한 기능을 선택적으로 추가 가능
- **단점:**
    - 대규모 및 복잡한 애플리케이션에는 부적합

**2. Express.js (JavaScript - Node.js)**

- **특징:**
    - Node.js를 기반으로 하는 가벼운 웹 애플리케이션을 구축하기 위한 마이크로 프레임워크
- **장점:**
    - 비동기 프로그래밍에 강점, 높은 확장성.
- 단점:
    - **오버헤드의 존재**: Express 자체는 매우 가볍지만, 복잡한 애플리케이션을 구축하기 위해서는 여러 추가 모듈과 미들웨어를 선택하고 구성해야하는 단점
    - **구조적인 유연성**: Express는 구조에 대해 엄격한 규칙을 제시하지 않기 때문에, 프로젝트가 커질수록 구조적인 일관성을 유지하는 것이 어려울 수 있습니다.